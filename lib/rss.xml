<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[knowledge-database]]></title><description><![CDATA[Obsidian digital garden]]></description><link>https://WhiteClouds.github.io/</link><image><url>https://WhiteClouds.github.io/lib/media/favicon.png</url><title>knowledge-database</title><link>https://WhiteClouds.github.io/</link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Sun, 07 Apr 2024 13:44:47 GMT</lastBuildDate><atom:link href="https://WhiteClouds.github.io/lib/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 07 Apr 2024 13:44:46 GMT</pubDate><ttl>60</ttl><dc:creator/><item><title><![CDATA[4. 什么是字节码?采用字节码的好处是什么?]]></title><description><![CDATA[ 
 <br>在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以， Java 程序运行时相对来说还是高效的（不过，和 C、 C++，Rust，Go 等语言还是有一定差距的），而且，由于字节码并不针对一种特定的机器，因此，Java 程序无须重新编译便可在多种不同操作系统的计算机上运行。<br>Java 程序从源代码到运行的过程如下图所示：<br>
<img alt="Pasted image 20240308091209.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240308091209.png"><br>Java程序转变为机器代码的过程
我们需要格外注意的是 .class-&gt;机器码 这一步。在这一步 JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 **JIT（Just in Time Compilation）** 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。这也解释了我们为什么经常会说 **Java 是编译与解释共存的语言**。
![[Pasted image 20240308091522.png]]
Java程序转变为机器代码的过程<br>
HotSpot 采用了惰性评估(Lazy Evaluation)的做法，根据二八定律，消耗大部分系统资源的只有那一小部分的代码（热点代码），而这也就是 JIT 所需要编译的部分。JVM 会根据代码每次被执行的情况收集信息并相应地做出一些优化，因此执行的次数越多，它的速度就越快。
<br>JDK、JRE、JVM、JIT 这四者的关系如下图所示。<br>
<img alt="Pasted image 20240308091638.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240308091638.png"><br>JDK、JRE、JVM、JIT 这四者的关系<br>下面这张图是 JVM 的大致结构模型。<br>
<img alt="Pasted image 20240308091750.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240308091750.png"><br>JVM 的大致结构模型
# anki
START
问答题
正面: 什么是字节码？
背面: 由编译器编译的.class文件，是JVM可以理解的代码。
[[4. 什么是字节码?采用字节码的好处是什么?]]

END<br>START<br>
问答题<br>
正面: 什么是HotSpot？是如何运行的？<br>
背面: 是热点代码的意思，在程序中经常被执行的代码叫热点代码。为加快程序执行速度，会将热点代码编译成机器码，而不是通过解释字节码的方式执行。<br>
[[4. 什么是字节码?采用字节码的好处是什么?<br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/4.-什么是字节码/4.-什么是字节码.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本概念与常识/4. 什么是字节码?采用字节码的好处是什么?.md</guid><pubDate>Thu, 28 Mar 2024 03:40:28 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240308091209.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240308091209.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[1. Java 语言有哪些特点?]]></title><description><![CDATA[ 
 <br>
<br>简单易学；
<br>面向对象（封装，继承，多态）；
<br>平台无关性（ Java 虚拟机实现平台无关性）；
<br>支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）；
<br>可靠性（具备异常处理和自动内存管理机制）；
<br>安全性（Java 语言本身的设计就提供了多重安全防护机制如访问权限修饰符、限制程序直接访问操作系统资源）；
<br>高效性（通过 Just In Time 编译器等技术的优化，Java 语言的运行效率还是非常不错的）；
<br>易用性：支持网络、IO编程并且很方便，；
<br>编译与解释并存
<br>
🐛 修正（参见：issue#544open in new window）：C++11 开始（2011 年的时候）,C++就引入了多线程库，在 windows、linux、macos 都可以使用std::thread和std::async来创建线程。参考链接：<a rel="noopener" class="external-link" href="http://www.cplusplus.com/reference/thread/thread/?kw=thread" target="_blank">http://www.cplusplus.com/reference/thread/thread/?kw=thread</a>
<br><br>START<br>
问答题<br>
正面: Java 语言有哪些特点?<br>
背面:<br>
原文:<a data-href="1. Java 语言有哪些特点?" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/1.-java-语言有哪些特点?.md" class="internal-link" target="_self" rel="noopener">1. Java 语言有哪些特点?</a><br>
简单易学、面向对象、跨平台、多线程、可靠性、安全性、易用性<br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/1.-java-语言有哪些特点/1.-java-语言有哪些特点.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本概念与常识/1. Java 语言有哪些特点?.md</guid><pubDate>Sun, 07 Apr 2024 13:41:53 GMT</pubDate></item><item><title><![CDATA[1. 成员变量与局部变量的区别？]]></title><description><![CDATA[ 
 <br><img alt="Pasted image 20240407103709.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240407103709.png"><br>
<br>语法形式：从语法形式上看，成员变量是属于类的，而局部变量是在代码块或方法中定义的变量或是方法的参数；成员变量可以被&nbsp;public,private,static&nbsp;等修饰符所修饰，而局部变量不能被访问控制修饰符及&nbsp;static&nbsp;所修饰；但是，成员变量和局部变量都能被&nbsp;final&nbsp;所修饰。
<br>存储方式：从变量在内存中的存储方式来看，如果成员变量是使用&nbsp;static&nbsp;修饰的，那么这个成员变量是属于类的，如果没有使用&nbsp;static&nbsp;修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。
<br>生存时间：从变量在内存中的生存时间上看，成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。
<br>默认值：从变量是否有默认值来看，成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被&nbsp;final&nbsp;修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。
<br>为什么成员变量有默认值？<br>
<br>
先不考虑变量类型，如果没有默认值会怎样？变量存储的是内存地址对应的任意随机值，程序读取该值运行会出现意外。

<br>
默认值有两种设置方式：手动和自动，根据第一点，没有手动赋值一定要自动赋值。成员变量在运行时可借助反射等方法手动赋值，而局部变量不行。

<br>
对于编译器（javac）来说，局部变量没赋值很好判断，可以直接报错。而成员变量可能是运行时赋值，无法判断，误报“没默认值”又会影响用户体验，所以采用自动赋默认值。

<br>public class VariableExample {

    // 成员变量
    private String name;
    private int age;

    // 方法中的局部变量
    public void method() {
        int num1 = 10; // 栈中分配的局部变量
        String str = "Hello, world!"; // 栈中分配的局部变量
        System.out.println(num1);
        System.out.println(str);
    }

    // 带参数的方法中的局部变量
    public void method2(int num2) {
        int sum = num2 + 10; // 栈中分配的局部变量
        System.out.println(sum);
    }

    // 构造方法中的局部变量
    public VariableExample(String name, int age) {
        this.name = name; // 对成员变量进行赋值
        this.age = age; // 对成员变量进行赋值
        int num3 = 20; // 栈中分配的局部变量
        String str2 = "Hello, " + this.name + "!"; // 栈中分配的局部变量
        System.out.println(num3);
        System.out.println(str2);
    }
}
复制<br><br>START<br>
问答题<br>
正面: 成员变量与局部变量的区别？<br>
背面: <a data-href="1. 成员变量与局部变量的区别？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/变量/1.-成员变量与局部变量的区别？.html" class="internal-link" target="_self" rel="noopener">1. 成员变量与局部变量的区别？</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/变量/1.-成员变量与局部变量的区别？.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/变量/1. 成员变量与局部变量的区别？.md</guid><pubDate>Sun, 07 Apr 2024 13:36:42 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240407103709.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240407103709.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Https的加密原理]]></title><description><![CDATA[<a class="tag" href="https://WhiteClouds.github.io/?query=tag:http" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#http</a> <a class="tag" href="https://WhiteClouds.github.io/?query=tag:加密" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#加密</a> 
 <br><a href="https://WhiteClouds.github.io?query=tag:http" class="tag" target="_blank" rel="noopener">#http</a> <a href="https://WhiteClouds.github.io?query=tag:加密" class="tag" target="_blank" rel="noopener">#加密</a><br><br>因为http的内容是明文传输的，明文数据会经过多个节点，劫持者在节点中查看、篡改传输的信息且不被双方察觉。所以需要对信息进行加密。最简单就是对称加密 。<br><br>
通信双方使用对称密钥进行加密和解密 11111
<br><img alt="Pasted image 20231117105844.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20231117105844.png"><br>
对称加密的问题在于通信双方如何安全的密钥交换，同时不被别人知晓。可以预先把密钥存储在双方的浏览器中。但是浏览器不可能存储所有网站的通信密钥，所以接下来我们要解决的是如何在网络环境中使用非对称加密安全的交换对称密钥。<br><br>
使用公钥加密的数据只有对应的私钥可以解密，使用私钥加密的数据只有对应的公钥可以解密。
<br><img alt="Pasted image 20231117110909.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20231117110909.png"><br>
基于非对称加密的特性，我们自然会有这样的思路：<br>
<br>某网站服务器拥有公钥A与对应的私钥A’
<br>浏览器向网站服务器请求，服务器把公钥A明文给传输浏览器。
<br>浏览器生成对称密钥X使用A加密数据发送给服务器
<br>服务器使用A‘进行解密获取到对称密钥X
<br>这样浏览器和服务器双方就可以使用对称加密X进行安全通信啦。
<br>最后就是为啥要先用非对称加密的方法先交换对称密钥，然后在用对称密钥通信呢。不能直接使用非对称加密方法加密数据直接进行通信吗？很重要的原因是非对称加密算法非常耗时，而对称加密快很多。<br>到这里就结束了吗？不对吧如果浏览器和服务器在交换对称密钥的过程中，通信的过程中被劫持了会怎么样呢？<br><br>我们来模拟一下上述的交换过程存在哪些漏洞：<br>
<br>某网站有用于非对称加密的公钥A、私钥A’，中间人拥有公钥B、私钥B’并劫持了浏览器和服务器的通信
<br>浏览器向网站服务器请求，服务器把公钥A明文给传输浏览器。
<br>中间人劫持到公钥A，保存下来，把数据包中的公钥A替换成自己伪造的公钥B
<br>浏览器生成一个用于对称加密的密钥X，用公钥B（浏览器无法得知公钥被替换了）加密后传给服务器。
<br>中间人劫持后用私钥B’解密得到密钥X，再用公钥A加密后传给服务器。
<br>服务器拿到后用私钥A’解密得到密钥X。
<br>这么一通操作之后通信双方都不知道密钥X已经被中间人获取了。造成这个结果的根本原因是浏览器无法确认收到的公钥是不是网站自己的。<br>这究竟要怎么办呢？这就需要数字证书来解决这个问题啦。<br><br>证书证书字面意思就是向浏览器保证你从这本”书“里获取到的公钥是一个可信任的网站的，并且这个公钥绝对没有并篡改过。<br><br><br>我们可以类比一下省份证，身份证也是一个证书。用来证明”你这个人真的是你这个人“，为什么身份证可以证明自己呢？因为有国家信用背书。同样的道理网站需要向证书机构（CA）申请一张数字证书，CA机构在颁发证书之前确认这个网站是合法的，可信任的。<br><br>图中左侧是证书的制作过程，右侧是验证过程：<br>
<img alt="Pasted image 20231117134734.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20231117134734.png"><br>
<br>数字签名的制作过程：
<br>
<br>CA机构拥有非对称加密的私钥和公钥
<br>CA机构对证书明文数据T（包含了网站的域名，网站的公钥和CA机构的信息、非对称加密算法等等）进行hash。
<br>对hash后的使用私钥加密，得到数字签名S。
<br>明文数据T和数字签名共同组成了数字证书，这样一份数字证书就可以颁发给网站了。
<br>
<br>浏览器验证过程：
<br>
<br>拿到证书，得到明文T，签名S。
<br>用CA机构的公钥对S解密得到明文数据T的散列值S‘。
<br>用证书里指明的hash算法对明文T进行hash得到T’。
<br>T’应当等于S‘，除非明文或签名被篡改。此时比较S’是否等于T’，等于则表明证书的值是否被篡改。
<br>显而易见在中间人没有CA机构的私钥并且浏览器使用的CA机构公钥是可信的情况下，中间人不可能在修改证书的内容后，还能通过验证。<br><br>我初识HTTPS的时候就有这个疑问，因为似乎那里的hash有点多余，把hash过程去掉也能保证证书没有被篡改。<br>最显然的是性能问题，前面我们已经说了非对称加密效率较差，证书信息一般较长，比较耗时。而hash后得到的是固定长度的信息（比如用md5算法hash后可以得到固定的128位的值），这样加解密就快很多。<br>当然也有安全上的原因，这部分内容相对深一些，感兴趣的可以看这篇解答：crypto.stackexchange.com/a/12780<br>在浏览器验证证书的流程中使用了CA机构的公钥对签名进行了解密，那又是如何保证CA公钥是可信的呢？<br><br>可以使用CA机构A对CA机构B的公钥制作证书。但终归是要有个顶的吧，不然这就不成无限套娃了。没错，操作系统、浏览器本身会预装一些它们信任的根证书，如果其中会有CA机构的根证书，这样就可以拿到它对应的可信公钥了。<br>实际上证书之间的认证也可以不止一层，可以A信任B，B信任C，以此类推，我们把它叫做信任链或数字证书链。也就是一连串的数字证书，由根证书为起点，透过层层信任，使终端实体证书的持有者可以获得转授的信任，以证明身份。<br><img alt="Pasted image 20231117141430.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20231117141430.png"><br><br>另外，不知你们是否遇到过网站访问不了、提示需安装证书的情况？这里安装的就是根证书。说明浏览器不认给这个网站颁发证书的机构（这个证书的CA结构是我们自己当然没有啦），那么你就得手动下载安装该机构的根证书（风险自己承担）。安装后，你就有了它的公钥，就可以用它验证服务器发来的证书是否可信了。当然也可以选择信任然后使用证书中的网站公钥进行加密通信🤣]]></description><link>https://WhiteClouds.github.io/4-精选随笔/https的加密原理.html</link><guid isPermaLink="false">4-精选随笔/Https的加密原理.md</guid><pubDate>Sun, 07 Apr 2024 13:23:42 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20231117105844.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20231117105844.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2. Java SE vs Java EE]]></title><description><![CDATA[ 
 <br>
<br>Java SE（Java Platform，Standard Edition）: Java 平台标准版，Java 编程语言的基础，它包含了支持 Java 应用程序开发和运行的核心类库以及虚拟机等核心组件。Java SE 可以用于构建桌面应用程序或简单的服务器应用程序。
<br>Java EE（Java Platform, Enterprise Edition ）：Java 平台企业版，建立在 Java SE 的基础上，包含了支持企业级应用程序开发和部署的标准和规范（比如 Servlet、JSP、EJB、JDBC、JPA、JTA、JavaMail、JMS）。 Java EE 可以用于构建分布式、可移植、健壮、可伸缩和安全的服务端 Java 应用程序，例如 Web 应用程序。
<br>简单来说，Java SE 是 Java 的基础版本，Java EE 是 Java 的高级版本。Java SE 更适合开发桌面应用程序或简单的服务器应用程序，Java EE 更适合开发复杂的企业级应用程序或 Web 应用程序。<br>除了 Java SE 和 Java EE，还有一个 Java ME（Java Platform，Micro Edition）。Java ME 是 Java 的微型版本，主要用于开发嵌入式消费电子设备的应用程序，例如手机、PDA、机顶盒、冰箱、空调等。Java ME 无需重点关注，知道有这个东西就好了，现在已经用不上了。<br><br>START<br>
问答题<br>
正面: Java SE vs Java EE<br>
背面: <a data-href="2. Java SE vs Java EE" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/2.-java-se-vs-java-ee.html" class="internal-link" target="_self" rel="noopener">2. Java SE vs Java EE</a><br>
简单来说，Java SE 是 Java 的基础版本，Java EE 是 Java 的高级版本。Java SE 更适合开发桌面应用程序或简单的服务器应用程序，Java EE 更适合开发复杂的企业级应用程序或 Web 应用程序。<br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/2.-java-se-vs-java-ee.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本概念与常识/2. Java SE vs Java EE.md</guid><pubDate>Thu, 28 Mar 2024 03:40:21 GMT</pubDate></item><item><title><![CDATA[JVM]]></title><description><![CDATA[ 
 <br><br>Java 虚拟机（JVM）是运行 Java 字节码的虚拟机。JVM 有针对不同系统的特定实现（Windows，Linux，macOS），目的是使用相同的字节码，它们都会给出相同的结果。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。<br><img alt="Pasted image 20240307141133.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240307141133.png"><br>运行在 Java 虚拟机之上的编程语言
<br>JVM 并不是只有一种！只要满足 JVM 规范，每个公司、组织或者个人都可以开发自己的专属 JVM。 也就是说我们平时接触到的 HotSpot VM 仅仅是是 JVM 规范的一种实现而已。除了我们平时最常用的 HotSpot VM 外，还有 J9 VM、Zing VM、JRockit VM 等 JVM。<br><br>JDK（Java Development Kit），它是功能齐全的 Java SDK，是提供给开发者使用，能够创建和编译 Java 程序的开发套件。它包含了 JRE，同时还包含了编译 java 源码的编译器 javac 以及一些其他工具比如 javadoc（文档注释工具）、jdb（调试器）、jconsole（基于 JMX 的可视化监控⼯具）、javap（反编译工具）等等。<br>JRE（Java Runtime Environment） 是 Java 运行时环境。它是运行已编译 Java 程序所需的所有内容的集合，主要包括 Java 虚拟机（JVM）、Java 基础类库（Class Library）。<br>也就是说，JRE 是 Java 运行时环境，仅包含 Java 应用程序的运行时环境和必要的类库。而 JDK 则包含了 JRE，同时还包括了 javac、javadoc、jdb、jconsole、javap 等工具，可以用于 Java 应用程序的开发和调试。如果需要进行 Java 编程工作，比如编写和编译 Java 程序、使用 Java API 文档等，就需要安装 JDK。而对于某些需要使用 Java 特性的应用程序，如 JSP 转换为 Java Servlet、使用反射等，也需要 JDK 来编译和运行 Java 代码。因此，即使不打算进行 Java 应用程序的开发工作，也有可能需要安装 JDK。<br>
<img alt="Pasted image 20240307141703.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240307141703.png"><br>JDK包含JRE
不过，从 JDK 9 开始，就不需要区分 JDK 和 JRE 的关系了，取而代之的是模块系统（JDK 被重新组织成 94 个模块）+ [jlink](https://openjdk.org/jeps/282)工具 (随 Java 9 一起发布的新命令行工具，用于生成自定义 Java 运行时映像，该映像仅包含给定应用程序所需的模块) 。并且，从 JDK 11 开始，Oracle 不再提供单独的 JRE 下载。<br>在<a data-tooltip-position="top" aria-label="https://javaguide.cn/java/new-features/java9.html" rel="noopener" class="external-link" href="https://javaguide.cn/java/new-features/java9.html" target="_blank"> Java 9 新特性概览</a>这篇文章中，我在介绍模块化系统的时候提到：<br>
在引入了模块系统之后，JDK 被重新组织成 94 个模块。Java 应用可以通过新增的 jlink 工具，创建出只包含所依赖的 JDK 模块的自定义运行时镜像。这样可以极大的减少 Java 运行时环境的大小。
<br>也就是说，可以用 jlink 根据自己的需求，创建一个更小的 runtime（运行时），而不是不管什么应用，都是同样的 JRE。<br>定制的、模块化的 Java 运行时映像有助于简化 Java 应用的部署和节省内存并增强安全性和可维护性。这对于满足现代应用程序架构的需求，如虚拟化、容器化、微服务和云原生开发，是非常重要的。<br><br>START<br>
问答题<br>
正面: 什么叫做JVM？<br>
背面: 运行JAVA字节吗的虚拟机，不同的平台有不同的虚拟机实现。字节码和不同系统的 JVM 实现是 Java 语言“一次编译，随处可以运行”的关键所在。<br>
<a data-href="3. JVM vs JDK vs JRE#JVM" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/3.-jvm-vs-jdk-vs-jre.html#JVM" class="internal-link" target="_self" rel="noopener">3. JVM vs JDK vs JRE &gt; JVM</a><br><br>END<br>START<br>
问答题<br>
正面: JDK和JRE以及JAVA 9之后的新特性？<br>
背面: JDK是开发、编译、运行、调试的整合工具包。JRE只是包含了JVM和java类库的运行时环境，所以JDK是包含JRE的。在JAVA 9之后不再区分JDK和JRE而是使用Jlink根据依赖自定义一个运行时镜像，这在虚拟化、容器化、微服务和云原生开发，是非常重要的。<br>
<a data-href="3. JVM vs JDK vs JRE#JDK 和 JRE" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/3.-jvm-vs-jdk-vs-jre.html#JDK_和_JRE" class="internal-link" target="_self" rel="noopener">3. JVM vs JDK vs JRE &gt; JDK 和 JRE</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/3.-jvm-vs-jdk-vs-jre.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本概念与常识/3. JVM vs JDK vs JRE.md</guid><pubDate>Thu, 28 Mar 2024 03:40:25 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240307141133.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240307141133.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[5. 为什么说Java语言“编译与解释并存”？]]></title><description><![CDATA[ 
 <br>其实这个问题我们讲字节码的时候已经提到过，因为比较重要，所以我们这里再提一下。<br>我们可以将高级编程语言按照程序的执行方式分为两种：<br>
<br>编译型：编译型语言会通过编译器将源代码一次性翻译成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。
<br>解释型：解释型语言会通过解释器一句一句的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。
<br><img alt="Pasted image 20240326100820.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240326100820.png"><br> 编译型语言和解释型语言
根据维基百科介绍：<br>
为了改善编译语言的效率而发展出的即时编译技术，已经缩小了这两种语言间的差距。这种技术混合了编译语言与解释型语言的优点，它像编译语言一样，先把程序源代码编译成字节码。到执行期时，再将字节码直译，之后执行。Java与LLVM是这种技术的代表产物。
<br>为什么说 Java 语言“编译与解释并存”？<br>这是因为 Java 语言既具有编译型语言的特征，也具有解释型语言的特征。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（.class 文件），这种字节码必须由 Java 解释器来解释执行。<br><br>START<br>
问答题<br>
正面: 为什么说Java语言“编译与解释并存”？<br>
背面: <a data-href="5. 为什么说Java语言“编译与解释并存”？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/5.-为什么说java语言“编译与解释并存”？.html" class="internal-link" target="_self" rel="noopener">5. 为什么说Java语言“编译与解释并存”？</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/5.-为什么说java语言“编译与解释并存”？.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本概念与常识/5. 为什么说Java语言“编译与解释并存”？.md</guid><pubDate>Thu, 28 Mar 2024 03:40:31 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240326100820.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240326100820.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[6. AOT有什么优点？为什么不全部使用AOT呢？]]></title><description><![CDATA[ 
 <br>JDK 9 引入了一种新的编译模式 AOT(Ahead of Time Compilation) 。和 JIT 不同的是，这种编译模式会在程序被执行前就将其编译成机器码，属于静态编译（C、 C++，Rust，Go 等语言就是静态编译）。AOT 避免了 JIT 预热等各方面的开销，可以提高 Java 程序的启动速度，避免预热时间长。并且，AOT 还能减少内存占用和增强 Java 程序的安全性（AOT 编译后的代码不容易被反编译和修改），特别适合云原生场景。<br>JIT 与 AOT 两者的关键指标对比:<br><img alt="Pasted image 20240326102845.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240326102845.png"><br>JIT vs AOT
可以看出，AOT 的主要优势在于启动时间、内存占用和打包体积。JIT 的主要优势在于具备更高的极限处理能力，可以降低请求的最大延迟。<br>既然 AOT 这么多优点，那为什么不全部使用这种编译方式呢？<br>我们前面也对比过 JIT 与 AOT，两者各有优点，只能说 AOT 更适合当下的云原生场景，对微服务架构的支持也比较友好。除此之外，AOT 编译无法支持 Java 的一些动态特性，如反射、动态代理、动态加载、JNI（Java Native Interface）等。然而，很多框架和库（如 Spring、CGLIB）都用到了这些特性。如果只使用 AOT 编译，那就没办法使用这些框架和库了，或者说需要针对性地去做适配和优化。举个例子，CGLIB 动态代理使用的是 ASM 技术，而这种技术大致原理是运行时直接在内存中生成并加载修改后的字节码文件也就是 .class 文件，如果全部使用 AOT 提前编译，也就不能使用 ASM 技术了。为了支持类似的动态特性，所以选择使用 JIT 即时编译器。<br><br>START<br>
问答题<br>
正面: AOT有什么优点？为什么不全部使用AOT呢？<br>
背面: <a data-href="6. AOT有什么优点？为什么不全部使用AOT呢？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/6.-aot有什么优点？为什么不全部使用aot呢？.html" class="internal-link" target="_self" rel="noopener">6. AOT有什么优点？为什么不全部使用AOT呢？</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/6.-aot有什么优点？为什么不全部使用aot呢？.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本概念与常识/6. AOT有什么优点？为什么不全部使用AOT呢？.md</guid><pubDate>Thu, 28 Mar 2024 03:40:34 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240326102845.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240326102845.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[7. Oracle JDK vs OpenJDK]]></title><description><![CDATA[ 
 <br>可能在看这个问题之前很多人和我一样并没有接触和使用过 OpenJDK 。那么 Oracle JDK 和 OpenJDK 之间是否存在重大差异？下面我通过收集到的一些资料，为你解答这个被很多人忽视的问题。<br>首先，2006 年 SUN 公司将 Java 开源，也就有了 OpenJDK。2009 年 Oracle 收购了 Sun 公司，于是自己在 OpenJDK 的基础上搞了一个 Oracle JDK。Oracle JDK 是不开源的，并且刚开始的几个版本（Java8 ~ Java11）还会相比于 OpenJDK 添加一些特有的功能和工具。<br>其次，对于 Java 7 而言，OpenJDK 和 Oracle JDK 是十分接近的。 Oracle JDK 是基于 OpenJDK 7 构建的，只添加了一些小功能，由 Oracle 工程师参与维护。<br>下面这段话摘自 Oracle 官方在 2012 年发表的一个博客：<br>
问：OpenJDK 存储库中的源代码与用于构建 Oracle JDK 的代码之间有什么区别？<br>
答：非常接近 - 我们的 Oracle JDK 版本构建过程基于 OpenJDK 7 构建，只添加了几个部分，例如部署代码，其中包括 Oracle 的 Java 插件和 Java WebStart 的实现，以及一些闭源的第三方组件，如图形光栅化器，一些开源的第三方组件，如 Rhino，以及一些零碎的东西，如附加文档或第三方字体。展望未来，我们的目的是开源 Oracle JDK 的所有部分，除了我们考虑商业功能的部分。
<br><br>
<br>是否开源：OpenJDK 是一个参考模型并且是完全开源的，而 Oracle JDK 是基于 OpenJDK 实现的，并不是完全开源的（个人观点：众所周知，JDK 原来是 SUN 公司开发的，后来 SUN 公司又卖给了 Oracle 公司，Oracle 公司以 Oracle 数据库而著名，而 Oracle 数据库又是闭源的，这个时候 Oracle 公司就不想完全开源了，但是原来的 SUN 公司又把 JDK 给开源了，如果这个时候 Oracle 收购回来之后就把他给闭源，必然会引起很多 Java 开发者的不满，导致大家对 Java 失去信心，那 Oracle 公司收购回来不就把 Java 烂在手里了吗！然后，Oracle 公司就想了个骚操作，这样吧，我把一部分核心代码开源出来给你们玩，并且我要和你们自己搞的 JDK 区分下，你们叫 OpenJDK，我叫 Oracle JDK，我发布我的，你们继续玩你们的，要是你们搞出来什么好玩的东西，我后续发布 Oracle JDK 也会拿来用一下，一举两得！）OpenJDK 开源项目：<a data-tooltip-position="top" aria-label="https://github.com/openjdk/jdk%E3%80%82" rel="noopener" class="external-link" href="https://github.com/openjdk/jdk%E3%80%82" target="_blank">https://github.com/openjdk/jdk。</a>
<br>是否免费：Oracle JDK 会提供免费版本，但一般有时间限制。JDK17 之后的版本可以免费分发和商用，但是仅有 3 年时间，3 年后无法免费商用。不过，JDK8u221 之前只要不升级可以无限期免费。OpenJDK 是完全免费的。
<br>功能性：Oracle JDK 在 OpenJDK 的基础上添加了一些特有的功能和工具，比如 Java Flight Recorder（JFR，一种监控工具）、Java Mission Control（JMC，一种监控工具）等工具。不过，在 Java 11 之后，OracleJDK 和 OpenJDK 的功能基本一致，之前 OracleJDK 中的私有组件大多数也已经被捐赠给开源组织。
<br>稳定性：OpenJDK 不提供 LTS 服务，而 OracleJDK 大概每三年都会推出一个 LTS 版进行长期支持。不过，很多公司都基于 OpenJDK 提供了对应的和 OracleJDK 周期相同的 LTS 版。因此，两者稳定性其实也是差不多的。
<br>协议：Oracle JDK 使用 BCL/OTN 协议获得许可，而 OpenJDK 根据 GPL v2 许可获得许可。
<br><br>
答：

<br>OpenJDK 是开源的，开源意味着你可以对它根据你自己的需要进行修改、优化，比如 Alibaba 基于 OpenJDK 开发了 Dragonwell8：<a rel="noopener" class="external-link" href="https://github.com/alibaba/dragonwell8" target="_blank">https://github.com/alibaba/dragonwell8</a> 
<br>OpenJDK 是商业免费的（这也是为什么通过 yum 包管理器上默认安装的 JDK 是 OpenJDK 而不是 Oracle JDK）。虽然 Oracle JDK 也是商业免费（比如 JDK 8），但并不是所有版本都是免费的。
<br>OpenJDK 更新频率更快。Oracle JDK 一般是每 6 个月发布一个新版本，而 OpenJDK 一般是每 3 个月发布一个新版本。（现在你知道为啥 Oracle JDK 更稳定了吧，先在 OpenJDK 试试水，把大部分问题都解决掉了才在 Oracle JDK 上发布）<br>
基于以上这些原因，OpenJDK 还是有存在的必要的！

<br><img alt="Pasted image 20240328101246.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240328101246.png"><br>oracle jdk release cadence
## Oracle JDK 和 OpenJDK 如何选择？
建议选择 OpenJDK 或者基于 OpenJDK 的发行版，比如 AWS 的 Amazon Corretto，阿里巴巴的 Alibaba Dragonwell。<br>🌈 拓展一下：<br>
<br>BCL 协议（Oracle Binary Code License Agreement）：可以使用 JDK（支持商用），但是不能进行修改。
<br>OTN 协议（Oracle Technology Network License Agreement）：11 及之后新发布的 JDK 用的都是这个协议，可以自己私下用，但是商用需要付费。
<br><br>START<br>
问答题<br>
正面: Oracle JDK 和 OpenJDK 的区别？<br>
背面: <a data-href="7. Oracle JDK vs OpenJDK#^1e2ed7" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/7.-oracle-jdk-vs-openjdk.html#^1e2ed7" class="internal-link" target="_self" rel="noopener">7. Oracle JDK vs OpenJDK &gt; ^1e2ed7</a><br><br>END<br>START<br>
问答题<br>
正面: 既然 Oracle JDK 这么好，那为什么还要有 OpenJDK？<br>
背面: <a data-href="7. Oracle JDK vs OpenJDK#^dba312" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/7.-oracle-jdk-vs-openjdk.html#^dba312" class="internal-link" target="_self" rel="noopener">7. Oracle JDK vs OpenJDK &gt; ^dba312</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/7.-oracle-jdk-vs-openjdk.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本概念与常识/7. Oracle JDK vs OpenJDK.md</guid><pubDate>Thu, 28 Mar 2024 03:40:38 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240328101246.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240328101246.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[anki]]></title><description><![CDATA[ 
 <br>我知道很多人没学过 C++，但是面试官就是没事喜欢拿咱们 Java 和 C++ 比呀！没办法！！！就算没学过 C++，也要记下来。<br>
虽然，Java 和 C++ 都是面向对象的语言，都支持封装、继承和多态，但是，它们还是有挺多不相同的地方：<br>
<br>Java 不提供指针来直接访问内存，程序内存更加安全Java 的类是单继承的，
<br>C++ 支持多重继承；虽然 Java 的类不可以多继承，但是接口可以多继承。
<br>Java 有自动内存管理垃圾回收机制(GC)，不需要程序员手动释放无用内存。
<br>C ++同时支持方法重载和操作符重载，但是 Java 只支持方法重载（操作符重载增加了复杂性，这与 Java 最初的设计思想不符）
<br>……
<br><br>START<br>
问答题<br>
正面: java与c++的区别<br>
背面: <a data-href="8. Java与C++的区别" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/8.-java与c++的区别.html" class="internal-link" target="_self" rel="noopener">8. Java与C++的区别</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本概念与常识/8.-java与c++的区别.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本概念与常识/8. Java与C++的区别.md</guid><pubDate>Thu, 28 Mar 2024 03:40:41 GMT</pubDate></item><item><title><![CDATA[Java 中有 8 种基本数据类型，分别为：]]></title><description><![CDATA[ 
 <br><br>
<br>6 种数字类型：

<br>4 种整数型：byte、short、int、long
<br>2中浮点型：float、double


<br>1中字符类型：char
<br>1中布尔类型：boolean
<br><br><br><br>可以看到，像 byte、short、int、long能表示的最大正数都减 1 了。这是为什么呢？这是因为在二进制补码表示法中，最高位是用来表示符号的（0 表示正数，1 表示负数），其余位表示数值部分。所以，如果我们要表示最大的正数，我们需要把除了最高位之外的所有位都设为 1。如果我们再加 1，就会导致溢出，变成一个负数。而最大负数就是全部为0所以不用减1<br>对于 boolean，官方文档未明确定义，它依赖于 JVM 厂商的具体实现。逻辑上理解是占用 1 位，但是实际中会考虑计算机高效存储因素。<br>另外，Java 的每种基本类型所占存储空间的大小不会像其他大多数语言那样随机器硬件架构的变化而变化。这种所占存储空间大小的不变性是 Java 程序比用其他大多数语言编写的程序更具可移植性的原因之一（《Java 编程思想》2.2 节有提到）。<br>注意：<br>
<br>Java 里使用 long 类型的数据一定要在数值后面加上 L，否则将作为整型解析。
<br>char a = 'h'char :单引号，String a = "hello" :双引号。
<br><br>这八种基本类型都有对应的包装类分别为：Byte、Short、Integer、Long、Float、Double、Character、Boolean 。<br><br>START<br>
问答题<br>
正面: Java中有哪些基础类型，并分别占用多少b？<br>
背面: <a data-href="1. Java中的基本数据类型#Java 中有 8 种基本数据类型，分别为：" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/1.-java中的基本数据类型.html#Java_中有_8_种基本数据类型，分别为：" class="internal-link" target="_self" rel="noopener">1. Java中的基本数据类型 &gt; Java 中有 8 种基本数据类型，分别为：</a><br><br>END<br>START<br>
问答题<br>
正面: java的整数最大范围为什么要减1？<br>
背面: <a data-href="1. Java中的基本数据类型#为什么最大整数需要减1" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/1.-java中的基本数据类型.html#为什么最大整数需要减1" class="internal-link" target="_self" rel="noopener">1. Java中的基本数据类型 &gt; 为什么最大整数需要减1</a><br><br>END<br>START<br>
问答题<br>
正面: char a = 'h'char :单引号，String a = "hello" :双引号<br>
背面: <br><br>END<br>START<br>
问答题<br>
正面: 基础数据类型对应的包装类型？<br>
背面: <a data-href="1. Java中的基本数据类型#对应的包装类型" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/1.-java中的基本数据类型.html#对应的包装类型" class="internal-link" target="_self" rel="noopener">1. Java中的基本数据类型 &gt; 对应的包装类型</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/1.-java中的基本数据类型.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本数据类型/1. Java中的基本数据类型.md</guid><pubDate>Sun, 07 Apr 2024 06:41:24 GMT</pubDate></item><item><title><![CDATA[2. 基本类型和包装类型的区别]]></title><description><![CDATA[ 
 <br><img alt="Pasted image 20240407094416.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240407094416.png"><br>基本类型 vs 包装类型<br>
<br>用途：除了定义一些常量和局部变量之外，我们在其他地方比如方法参数、对象属性中很少会使用基本类型来定义变量。并且，包装类型可用于泛型，而基本类型不可以。
<br>存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被&nbsp;static&nbsp;修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，我们知道几乎所有对象实例都存在于堆中。
<br>占用空间：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。
<br>默认值：成员变量包装类型不赋值就是&nbsp;null&nbsp;，而基本类型有默认值且不是&nbsp;null。
<br>比较方式：对于基本数据类型来说，==&nbsp;比较的是值。对于包装数据类型来说，==&nbsp;比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用&nbsp;equals()&nbsp;方法。
<br>为什么说是几乎所有对象实例都存在于堆中呢？&nbsp;这是因为 HotSpot 虚拟机引入了 JIT 优化之后，会对对象进行逃逸分析，如果发现某一个对象并没有逃逸到方法外部，那么就可能通过标量替换来实现栈上分配，而避免堆上分配内存<br>⚠️ 注意：基本数据类型存放在栈中是一个常见的误区！&nbsp;基本数据类型的存储位置取决于它们的作用域和声明方式。如果它们是局部变量，那么它们会存放在栈中；如果它们是成员变量，那么它们会存放在堆中。 <br>public class Test {
    // 成员变量，存放在堆中
    int a = 10;
    // 被 static 修饰，也存放在堆中，但属于类，不属于对象
    // JDK1.7 静态变量从永久代移动了 Java 堆中
    static int b = 20;

    public void method() {
        // 局部变量，存放在栈中
        int c = 30;
        static int d = 40; // 编译错误，不能在方法中使用 static 修饰局部变量
    }
}
复制<br><br>START<br>
问答题<br>
正面: 基本类型 vs 包装类型<br>
背面: <a data-href="2. 基本类型和包装类型的区别" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/2.-基本类型和包装类型的区别.html" class="internal-link" target="_self" rel="noopener">2. 基本类型和包装类型的区别</a><br><br>END<br>START<br>
问答题<br>
正面: 基本类型都是存放在栈中的吗？<br>
背面: 局部变量是放在栈中，成员变量是放在堆中。<br>
<a data-href="2. 基本类型和包装类型的区别#^185dcd" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/2.-基本类型和包装类型的区别.html#^185dcd" class="internal-link" target="_self" rel="noopener">2. 基本类型和包装类型的区别 &gt; ^185dcd</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/2.-基本类型和包装类型的区别.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本数据类型/2. 基本类型和包装类型的区别.md</guid><pubDate>Sun, 07 Apr 2024 01:50:37 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240407094416.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240407094416.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[3. 包装类型的换成机制了解吗？]]></title><description><![CDATA[ 
 <br>Java 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。<br>Byte,Short,Integer,Long&nbsp;这 4 种包装类默认创建了数值&nbsp;[-128，127]&nbsp;的相应类型的缓存数据，Character&nbsp;创建了数值在&nbsp;[0,127]&nbsp;范围的缓存数据，Boolean&nbsp;直接返回&nbsp;True&nbsp;or&nbsp;False。<br>Integer 缓存源码：<br>public static Integer valueOf(int i) {
    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)
        return IntegerCache.cache[i + (-IntegerCache.low)];
    return new Integer(i);
}

private static class IntegerCache {
    static final int low = -128;
    static final int high;
    static {
        // high value may be configured by property
        int h = 127;
    }
}
复制<br>Character&nbsp;缓存源码:<br>public static Character valueOf(char c) {
    if (c &lt;= 127) { // must cache
      return CharacterCache.cache[(int)c];
    }
    return new Character(c);
}

private static class CharacterCache {
    private CharacterCache(){}
    static final Character cache[] = new Character[127 + 1];
    static {
        for (int i = 0; i &lt; cache.length; i++)
            cache[i] = new Character((char)i);
    }

}
复制<br>Boolean&nbsp;缓存源码：<br>public static Boolean valueOf(boolean b) {
    return (b ? TRUE : FALSE);
}
复制<br>如果超出对应范围仍然会去创建新的对象，缓存的范围区间的大小只是在性能和资源之间的权衡。<br>两种浮点数类型的包装类&nbsp;Float, Double&nbsp;并没有实现缓存机制。<br>Integer i1 = 33;
Integer i2 = 33;
System.out.println(i1 == i2);// 输出 true

Float i11 = 333f;
Float i22 = 333f;
System.out.println(i11 == i22);// 输出 false

Double i3 = 1.2;
Double i4 = 1.2;
System.out.println(i3 == i4);// 输出 false
复制<br>下面我们来看一个问题：下面的代码的输出结果是&nbsp;true&nbsp;还是&nbsp;false&nbsp;呢？ <br>Integer i1 = 40;
Integer i2 = new Integer(40);
System.out.println(i1==i2);
复制<br>Integer i1=40&nbsp;这一行代码会发生装箱，也就是说这行代码等价于&nbsp;Integer i1=Integer.valueOf(40)&nbsp;。因此，i1直接使用的是缓存中的对象。而Integer i2 = new Integer(40)&nbsp;会直接创建新的对象。<br>因此，答案是&nbsp;false&nbsp;。你答对了吗？<br>记住：所有整型包装类对象之间值的比较，全部使用 equals 方法比较。<br><img alt="Pasted image 20240407095857.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240407095857.png"><br><br>START<br>
问答题<br>
正面: 什么是包装类型的缓存机制？有什么用处？<br>
背面: <a data-href="3. 包装类型的换成机制了解吗？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/3.-包装类型的换成机制了解吗？.html" class="internal-link" target="_self" rel="noopener">3. 包装类型的换成机制了解吗？</a><br><br>END<br>START<br>
问答题<br>
正面: 那些包装类型有缓存机制？那些没有？有的话默认值是什么？超出默认值回怎么样呢？<br>
背面: Byte、Short、Int、Long 的默认值都是是[-128,127] ；Boolean 的默认只是 true 或 false；Float 和 Double 没有缓存机制；超出默认值的时候会创建一个对应值的包装类型。比如 Long var = 1000 就是一个新的对象<br>
<a data-href="3. 包装类型的换成机制了解吗？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/3.-包装类型的换成机制了解吗？.html" class="internal-link" target="_self" rel="noopener">3. 包装类型的换成机制了解吗？</a><br><br>END<br>START<br>
问答题<br>
正面: 包装类型之间的相等性比较为什么要用 equals？<br>
背面: <a data-href="3. 包装类型的换成机制了解吗？#^c54342" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/3.-包装类型的换成机制了解吗？.html#^c54342" class="internal-link" target="_self" rel="noopener">3. 包装类型的换成机制了解吗？ &gt; ^c54342</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/3.-包装类型的换成机制了解吗？.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本数据类型/3. 包装类型的换成机制了解吗？.md</guid><pubDate>Sun, 07 Apr 2024 06:41:18 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240407095857.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240407095857.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[4. 自动装箱与自动拆箱了解吗？原理是什么？]]></title><description><![CDATA[ 
 <br>什么是自动拆装箱？<br>
<br>装箱：将基本类型用它们对应的引用类型包装起来；
<br>拆箱：将包装类型转换为基本数据类型；
<br>举例：<br>Integer i = 10;  //装箱
int n = i;   //拆箱
复制<br>上面这两行代码对应的字节码为：<br>   L1

    LINENUMBER 8 L1

    ALOAD 0

    BIPUSH 10

    INVOKESTATIC java/lang/Integer.valueOf (I)Ljava/lang/Integer;

    PUTFIELD AutoBoxTest.i : Ljava/lang/Integer;

   L2

    LINENUMBER 9 L2

    ALOAD 0

    ALOAD 0

    GETFIELD AutoBoxTest.i : Ljava/lang/Integer;

    INVOKEVIRTUAL java/lang/Integer.intValue ()I

    PUTFIELD AutoBoxTest.n : I

    RETURN
复制<br>从字节码中，我们发现装箱其实就是调用了包装类的 valueOf() 方法，拆箱其实就是调用了&nbsp;xxxValue() 方法。<br>因此，<br>
<br>Integer i = 10&nbsp;等价于&nbsp;Integer i = Integer.valueOf(10)
<br>int n = i&nbsp;等价于&nbsp;int n = i.intValue();
<br>注意：如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。<br>private static long sum() {
    // 应该使用 long 而不是 Long
    Long sum = 0L;
    for (long i = 0; i &lt;= Integer.MAX_VALUE; i++)
        sum += i;
    return sum;
}
复制<br><br>START<br>
问答题<br>
正面: 什么是自动拆装箱？频繁的拆装箱会影响进度吗？<br>
背面: <a data-href="4. 自动装箱与自动拆箱了解吗？原理是什么？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/4.-自动装箱与自动拆箱了解吗？原理是什么？.html" class="internal-link" target="_self" rel="noopener">4. 自动装箱与自动拆箱了解吗？原理是什么？</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/4.-自动装箱与自动拆箱了解吗？原理是什么？.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本数据类型/4. 自动装箱与自动拆箱了解吗？原理是什么？.md</guid><pubDate>Sun, 07 Apr 2024 06:41:15 GMT</pubDate></item><item><title><![CDATA[5. 为什么浮点数运算的时候会有精度丢失的风险？]]></title><description><![CDATA[ 
 <br>浮点数运算精度丢失代码演示：<br>float a = 2.0f - 1.9f;
float b = 1.8f - 1.7f;
System.out.println(a);// 0.100000024
System.out.println(b);// 0.099999905
System.out.println(a == b);// false
复制<br>为什么会出现这个问题呢？<br>这个和计算机保存浮点数的机制有很大关系。我们知道计算机是二进制的，而且计算机在表示一个数字时，宽度是有限的，无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。这也就是解释了为什么浮点数没有办法用二进制精确表示。<br>就比如说十进制下的 0.2 就没办法精确转换成二进制小数：<br>// 0.2 转换为二进制数的过程为，不断乘以 2，直到不存在小数为止，
// 在这个计算过程中，得到的整数部分从上到下排列就是二进制的结果。
0.2 * 2 = 0.4 -&gt; 0
0.4 * 2 = 0.8 -&gt; 0
0.8 * 2 = 1.6 -&gt; 1
0.6 * 2 = 1.2 -&gt; 1
0.2 * 2 = 0.4 -&gt; 0（发生循环）
...
复制<br>关于浮点数的更多内容，建议看一下<a data-tooltip-position="top" aria-label="http://kaito-kidd.com/2018/08/08/computer-system-float-point/" rel="noopener" class="external-link" href="http://kaito-kidd.com/2018/08/08/computer-system-float-point/" target="_blank">计算机系统基础（四）浮点数</a>这篇文章。<br><br>START<br>
问答题<br>
正面: 为什么浮点数运算的时候会有精度丢失的风险？<br>
背面: <a data-href="5. 为什么浮点数运算的时候会有精度丢失的风险？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/5.-为什么浮点数运算的时候会有精度丢失的风险？.html" class="internal-link" target="_self" rel="noopener">5. 为什么浮点数运算的时候会有精度丢失的风险？</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/5.-为什么浮点数运算的时候会有精度丢失的风险？.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本数据类型/5. 为什么浮点数运算的时候会有精度丢失的风险？.md</guid><pubDate>Sun, 07 Apr 2024 06:41:13 GMT</pubDate></item><item><title><![CDATA[6. 如何解决浮点数运算的精度丢失问题？]]></title><description><![CDATA[ 
 <br>BigDecimal&nbsp;可以实现对浮点数的运算，不会造成精度丢失。通常情况下，大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过&nbsp;BigDecimal&nbsp;来做的。<br>BigDecimal a = new BigDecimal("1.0");
BigDecimal b = new BigDecimal("0.9");
BigDecimal c = new BigDecimal("0.8");

BigDecimal x = a.subtract(b);
BigDecimal y = b.subtract(c);

System.out.println(x); /* 0.1 */
System.out.println(y); /* 0.1 */
System.out.println(Objects.equals(x, y)); /* true */
复制<br>关于&nbsp;BigDecimal&nbsp;的详细介绍，可以看看我写的这篇文章：<a data-tooltip-position="top" aria-label="https://javaguide.cn/java/basis/bigdecimal.html" rel="noopener" class="external-link" href="https://javaguide.cn/java/basis/bigdecimal.html" target="_blank">BigDecimal 详解open in new window</a>。<br><br>START<br>
问答题<br>
正面: 如何解决浮点数运算的精度丢失问题？<br>
背面: 使用 BigDecimal 来做<br>
<a data-href="6. 如何解决浮点数运算的精度丢失问题？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/6.-如何解决浮点数运算的精度丢失问题？.html" class="internal-link" target="_self" rel="noopener">6. 如何解决浮点数运算的精度丢失问题？</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/6.-如何解决浮点数运算的精度丢失问题？.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本数据类型/6. 如何解决浮点数运算的精度丢失问题？.md</guid><pubDate>Sun, 07 Apr 2024 06:41:10 GMT</pubDate></item><item><title><![CDATA[7. 超过long整数的数据应该如何表示？]]></title><description><![CDATA[ 
 <br>基本数值类型都有一个表达范围，如果超过这个范围就会有数值溢出的风险。<br>在 Java 中，64 位 long 整型是最大的整数类型。<br>long l = Long.MAX_VALUE;
System.out.println(l + 1); // -9223372036854775808
System.out.println(l + 1 == Long.MIN_VALUE); // true
复制<br>BigInteger&nbsp;内部使用&nbsp;int[]&nbsp;数组来存储任意大小的整形数据。<br>相对于常规整数类型的运算来说，BigInteger&nbsp;运算的效率会相对较低。<br><br>START<br>
问答题<br>
正面: 超过long整数的数据应该如何表示？<br>
背面: <a data-href="7. 超过long整数的数据应该如何表示？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/7.-超过long整数的数据应该如何表示？.html" class="internal-link" target="_self" rel="noopener">7. 超过long整数的数据应该如何表示？</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本数据类型/7.-超过long整数的数据应该如何表示？.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本数据类型/7. 超过long整数的数据应该如何表示？.md</guid><pubDate>Sun, 07 Apr 2024 06:41:07 GMT</pubDate></item><item><title><![CDATA[1. 注释有哪几种形式]]></title><description><![CDATA[ 
 <br>Java 中的注释有三种：<br><img alt="Pasted image 20240328103341.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240328103341.png"><br>Java 注释类型总结
1. **单行注释**：通常用于解释方法内某单行代码的作用。//
2. **多行注释**：通常用于解释一段代码的作用。/*  \*/
3. **文档注释**：通常用于生成 Java 开发文档。/** \*/<br>用的比较多的还是单行注释和文档注释，多行注释在实际开发中使用的相对较少。<br><img alt="Pasted image 20240328103521.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240328103521.png"><br>在我们编写代码的时候，如果代码量比较少，我们自己或者团队其他成员还可以很轻易地看懂代码，但是当项目结构一旦复杂起来，我们就需要用到注释了。注释并不会执行(编译器在编译代码之前会把代码中的所有注释抹掉,字节码中不保留注释)，是我们程序员写给自己看的，注释是你的代码说明书，能够帮助看代码的人快速地理清代码之间的逻辑关系。因此，在写程序的时候随手加上注释是一个非常好的习惯。<br>《Clean Code》这本书明确指出：<br>
代码的注释不是越详细越好。实际上好的代码本身就是注释，我们要尽量规范和美化自己的代码来减少不必要的注释。<br>
若编程语言足够有表达力，就不需要注释，尽量通过代码来阐述。
<br>举个例子：<br>
去掉下面复杂的注释，只需要创建一个与注释所言同一事物的函数即可<br>// check to see if the employee is eligible for full benefits
if ((employee.flags &amp; HOURLY_FLAG) &amp;&amp; (employee.age &gt; 65))
复制<br>应替换为<br>if (employee.isEligibleForFullBenefits())
复制<br><br>START<br>
问答题<br>
正面: 注释有哪几种形式<br>
背面: 单行、多行、文档;<a data-href="1. 注释有哪几种形式" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/1.-注释有哪几种形式.html" class="internal-link" target="_self" rel="noopener">1. 注释有哪几种形式</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/1.-注释有哪几种形式.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本语法/1. 注释有哪几种形式.md</guid><pubDate>Wed, 03 Apr 2024 03:02:33 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240328103341.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240328103341.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[anki]]></title><description><![CDATA[ 
 <br>在我们编写程序的时候，需要大量地为程序、类、变量、方法等取名字，于是就有了 标识符 。简单来说， 标识符就是一个名字 。<br>有一些标识符，Java 语言已经赋予了其特殊的含义，只能用于特定的地方，这些特殊的标识符就是 关键字 。简单来说，关键字是被赋予特殊含义的标识符 。比如，在我们的日常生活中，如果我们想要开一家店，则要给这个店起一个名字，起的这个“名字”就叫标识符。但是我们店的名字不能叫“警察局”，因为“警察局”这个名字已经被赋予了特殊的含义，而“警察局”就是我们日常生活中的关键字。<br><br>START<br>
问答题<br>
正面: 标识符和关键字的区别？<br>
背面: [[10. 标识符和关键字的区别是什么？]<br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/2.-标识符和关键字的区别是什么？.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本语法/2. 标识符和关键字的区别是什么？.md</guid><pubDate>Wed, 03 Apr 2024 03:01:32 GMT</pubDate></item><item><title><![CDATA[3. Java语言关键字有哪些？]]></title><description><![CDATA[ 
 <br><img alt="Pasted image 20240401100238.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240401100238.png"><br>
Tips：所有的关键字都是小写的，在 IDE 中会以特殊颜色显示。default 这个关键字很特殊，既属于程序控制，也属于类，方法和变量修饰符，还属于访问控制。在程序控制中，当在 switch 中匹配不到任何情况时，可以使用 default 来编写默认匹配的情况。在类，方法和变量修饰符中，从 JDK8 开始引入了默认方法，可以使用 default 关键字来定义一个方法的默认实现。在访问控制中，如果一个方法前没有任何修饰符，则默认会有一个修饰符 default，但是这个修饰符加上了就会报错。
<br>⚠️ 注意：虽然 true, false, 和 null 看起来像关键字但实际上他们是字面值，同时你也不可以作为标识符来使用。(官方文档)[https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.htmlopen ]<br><br>START<br>
问答题<br>
正面: java语言有哪些你不熟悉的关键字？<br>
背面: <a data-href="3. Java语言关键字有哪些？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/3.-java语言关键字有哪些？.html" class="internal-link" target="_self" rel="noopener">3. Java语言关键字有哪些？</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/3.-java语言关键字有哪些？.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本语法/3. Java语言关键字有哪些？.md</guid><pubDate>Wed, 03 Apr 2024 03:02:42 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240401100238.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240401100238.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[anki]]></title><description><![CDATA[ 
 <br>在写代码的过程中，常见的一种情况是需要某个整数类型变量增加 1 或减少 1，Java 提供了一种特殊的运算符，用于这种表达式，叫做自增运算符（++)和自减运算符（--）。<br>++ 和 -- 运算符可以放在变量之前，也可以放在变量之后，当运算符放在变量之前时(前缀)，先自增/减，再赋值；当运算符放在变量之后时(后缀)，先赋值，再自增/减。例如，当 b = ++a 时，先自增（自己增加 1），再赋值（赋值给 b）；当 b = a++ 时，先赋值(赋值给 b)，再自增（自己增加 1）。也就是，++a 输出的是 a+1 的值，a++输出的是 a 值。用一句口诀就是：“符号在前就先加/减，符号在后就后加/减”。<br><br>START<br>
问答题<br>
正面: ++i,--i,i++,i--的区别？<br>
背面: <a data-href="4. 自增自减运算符" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/4.-自增自减运算符.html" class="internal-link" target="_self" rel="noopener">4. 自增自减运算符</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/4.-自增自减运算符.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本语法/4. 自增自减运算符.md</guid><pubDate>Wed, 03 Apr 2024 03:02:46 GMT</pubDate></item><item><title><![CDATA[5. 位移运算符]]></title><description><![CDATA[<a class="tag" href="https://WhiteClouds.github.io/?query=tag:位移" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#位移</a> 
 <br><a href="https://WhiteClouds.github.io?query=tag:位移" class="tag" target="_blank" rel="noopener">#位移</a><br>
Tips：位移都是在补码的基础上进行计算的
<img alt="Pasted image 20240401101121.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240401101121.png">
<br>移位运算符是最基本的运算符之一，几乎每种编程语言都包含这一运算符。移位操作中，被操作的数据被视为二进制数，移位就是将其向左或向右移动若干位的运算。<br>移位运算符在各种框架以及 JDK 自身的源码中使用还是挺广泛的，HashMap（JDK1.8） 中的 hash 方法的源码就用到了移位运算符：<br>static final int hash(Object key) {
    int h;
    // key.hashCode()：返回散列值也就是hashcode
    // ^：按位异或
    // &gt;&gt;&gt;:无符号右移，忽略符号位，空位都以0补齐
    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);
  }
复制<br>在 Java 代码里使用 &lt;&lt;、 &gt;&gt; 和&gt;&gt;&gt;转换成的指令码运行起来会更高效些。<br>
掌握最基本的移位运算符知识还是很有必要的，这不光可以帮助我们在代码中使用，还可以帮助我们理解源码中涉及到移位运算符的代码。<br><br>
<br>&lt;&lt; :左移运算符，向左移若干位，高位丢弃，低位补零。x &lt;&lt; 1,相当于 x 乘以 2(不溢出的情况下)。
<br>&gt;&gt;:带符号右移，向右移若干位，高位补符号位，低位丢弃。正数高位补 0,负数高位补 1。x &gt;&gt; 1,相当于 x 除以 2。
<br>&gt;&gt;&gt;:无符号右移，忽略符号位，空位都以 0 补齐。
<br>由于 double，float 在二进制中的表现比较特殊，因此不能来进行移位操作。<br>移位操作符实际上支持的类型只有int和long，编译器在对short、byte、char类型进行移位前，都会将其转换为int类型再操作。 <br><br>当 int 类型左移/右移位数大于等于 32 位操作时，会先求余（%）后再进行左移/右移操作。也就是说左移/右移 32 位相当于不进行移位操作（32%32=0），左移/右移 42 位相当于左移/右移 10 位（42%32=10）。当 long 类型进行左移/右移操作时，由于 long 对应的二进制是 64 位，因此求余操作的基数也变成了 64。<br>也就是说：x&lt;&lt;42等同于x&lt;&lt;10，x&gt;&gt;42等同于x&gt;&gt;10，x &gt;&gt;&gt;42等同于x &gt;&gt;&gt; 10。<br><br>int i = -1;
System.out.println("初始数据：" + i);
System.out.println("初始数据对应的二进制字符串：" + Integer.toBinaryString(i)); // 这个是补码
i &lt;&lt;= 10;
System.out.println("左移 10 位后的数据 " + i);
System.out.println("左移 10 位后的数据对应的二进制字符 " + Integer.toBinaryString(i));
复制<br>输出：<br>初始数据：-1
初始数据对应的二进制字符串：11111111111111111111111111111111
左移 10 位后的数据 -1024
左移 10 位后的数据对应的二进制字符 11111111111111111111110000000000
复制<br>由于左移位数大于等于 32 位操作时，会先求余（%）后再进行左移操作，所以下面的代码左移 42 位相当于左移 10 位（42%32=10），输出结果和前面的代码一样。<br>int i = -1;
System.out.println("初始数据：" + i);
System.out.println("初始数据对应的二进制字符串：" + Integer.toBinaryString(i));
i &lt;&lt;= 42;
System.out.println("左移 10 位后的数据 " + i);
System.out.println("左移 10 位后的数据对应的二进制字符 " + Integer.toBinaryString(i));
复制<br>右移运算符使用类似，篇幅问题，这里就不做演示了。<br><br>START<br>
填空题<br>
文字: 位移操作的二进制运算是在什么{{c1::补}}码上进行运算的<br>
背面额外: <a data-href="5. 位移运算符" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/5.-位移运算符.html" class="internal-link" target="_self" rel="noopener">5. 位移运算符</a><br><br>END<br>START<br>
问答题<br>
正面: Java中有哪几种位运算符？<br>
背面: <a data-href="5. 位移运算符#Java 中有三种移位运算符：" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/5.-位移运算符.html#Java_中有三种移位运算符：" class="internal-link" target="_self" rel="noopener">5. 位移运算符 &gt; Java 中有三种移位运算符：</a><br><br>END<br>START<br>
问答题<br>
正面: 实际上java中只有哪几种类型的变量可以进行位运算？<br>
背面: <a data-href="5. 位移运算符#^b6ad16" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/5.-位移运算符.html#^b6ad16" class="internal-link" target="_self" rel="noopener">5. 位移运算符 &gt; ^b6ad16</a><br><br>END<br>START<br>
问答题<br>
正面: 如果位移的位数超出了变量的存储位数了怎么办？<br>
背面: <a data-href="5. 位移运算符#如果移位的位数超过数值所占有的位数会怎样？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/5.-位移运算符.html#如果移位的位数超过数值所占有的位数会怎样？" class="internal-link" target="_self" rel="noopener">5. 位移运算符 &gt; 如果移位的位数超过数值所占有的位数会怎样？</a><br><br>END<br>START<br>
问答题<br>
正面: 在i=-1时,请输出i&lt;&lt;10和i&lt;&lt;42的值？<br>
背面: <a data-href="5. 位移运算符#左移运算符代码示例" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/5.-位移运算符.html#左移运算符代码示例" class="internal-link" target="_self" rel="noopener">5. 位移运算符 &gt; 左移运算符代码示例</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/5.-位移运算符.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本语法/5. 位移运算符.md</guid><pubDate>Wed, 03 Apr 2024 03:02:50 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240401101121.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240401101121.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[6. continue、break和return的区别是什么？]]></title><description><![CDATA[ 
 <br>在循环结构中，当循环条件不满足或者循环次数达到要求时，循环会正常结束。但是，有时候可能需要在循环的过程中，当发生了某种条件之后 ，提前终止循环，这就需要用到下面几个关键词：<br>
<br>
continue：指跳出当前的这一次循环，继续下一次循环。

<br>
break：指跳出整个循环体，继续执行循环下面的语句。
return 用于跳出所在方法，结束该方法的运行。

<br>
return 一般有两种用法：return;：直接使用 return 结束方法执行，用于没有返回值函数的方法

<br>
return value：return 一个特定值，用于有返回值函数的方法

<br>思考一下：下列语句的运行结果是什么？<br>    public static void main(String[] args) {
        boolean flag = false;
        for (int i = 0; i &lt;= 3; i++) {
            if (i == 0) {
                System.out.println("0");
            } else if (i == 1) {
                System.out.println("1");
                continue;
            } else if (i == 2) {
                System.out.println("2");
                flag = true;
            } else if (i == 3) {
                System.out.println("3");
                break;
            } else if (i == 4) {
                System.out.println("4");
            }
            System.out.println("xixi");
        }
        if (flag) {
            System.out.println("haha");
            return;
        }
        System.out.println("heihei");
    }
复制<br>运行结果：<br>0
xixi
1
2
xixi
3
haha
复制<br><br>START<br>
问答题<br>
正面: continue、break和return的区别？<br>
背面: <a data-href="6. continue、break和return的区别是什么？" href="https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/6.-continue、break和return的区别是什么？.html" class="internal-link" target="_self" rel="noopener">6. continue、break和return的区别是什么？</a><br><br>END]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/java/基本语法/6.-continue、break和return的区别是什么？.html</link><guid isPermaLink="false">2-我的活动/每日面试题/java/基本语法/6. continue、break和return的区别是什么？.md</guid><pubDate>Wed, 03 Apr 2024 03:12:06 GMT</pubDate></item><item><title><![CDATA[REDME]]></title><description><![CDATA[ 
 <br>本专栏内容转载自：<br>
<br><a data-tooltip-position="top" aria-label="https://javaguide.cn/" rel="noopener" class="external-link" href="https://javaguide.cn/" target="_blank">JavaGuide</a>。
]]></description><link>https://WhiteClouds.github.io/2-我的活动/每日面试题/redme.html</link><guid isPermaLink="false">2-我的活动/每日面试题/REDME.md</guid><pubDate>Tue, 26 Mar 2024 06:49:14 GMT</pubDate></item><item><title><![CDATA[1. 7*24运行的家用微型服务器选购指南]]></title><description><![CDATA[<a class="tag" href="https://WhiteClouds.github.io/?query=tag:硬件" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#硬件</a> 
 <br> <a href="https://WhiteClouds.github.io?query=tag:硬件" class="tag" target="_blank" rel="noopener">#硬件</a> <br>楔机是最近在阿里云上看到了一个优惠活动，2核2G 3Mbps固定的公网IP的机子99/年，优惠时间是3年，便萌发了想要自己搭建一个私人服务器的想法。虽然趟了一路的坑，过程曲折了一点，但最终的结果还是搭成了。<br><br>先总体介绍一下项目，总体结构如图：<br><img alt="Pasted image 20231128113943.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20231128113943.png"><br>
<br>首先我们需要选购一台能够7*24h运转的家用服务器
<br>之后在阿里云上购买一台带固定公网IP的ESC
<br>为了能够在外网通过ssh连接放置在内网的服务器需要搭建openVpn
<br>最后如果你想让同事能在公网中访问到我们自建的博客服务，在同事面前秀一手。还有要做内网穿透FRP
<br><br>废话不多说，开始本文的主题。首先分析一下本文的服务器需要满足的需求。<br>既然是7*24小时运转，那自然需要考虑到功耗啦。我们先来算一笔账如果直接选购市面上常见的个人电脑按照待机80W来算，见下图：<br><img alt="Pasted image 20231128160417.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20231128160417.png"><br>一个月就需要46元的电费。但我是一个穷逼，30W是我的极限了。然后就是出于安全考虑，自然也是要选着小功耗。作为一台服务器，尽管是一台微型私人服务器，但毕竟是一台服务器性能肯定是有要求的。首先排除树莓派这种单片机。<br>在操作系统方面我们基本没得选，就是Linux系统。其次就是X86还是ARM，ARM虽然功耗更低，但X86发展了这么多年，兼容性、可玩性肯定是要比ARM强，所以选X86（主要是X86的网络教程多😊）。<br>确定OS和架构之后，那就开始分析硬件了：<br>
<br>CPU自然是往多核多线程靠，主频要求不高，这玩意就那两家，随便挑一家，散热器用CPU自带的。
<br>显卡是什么，不知道啊，用核显。
<br>内存我们后期需要使用Docker起服务所以起步16G DDR4，DDR5没降价前不考虑。内存我倒是觉得可以二手，之前二手内存的笔记本用了好几年了，没出过啥问题。
<br>因为需要全天运行机械硬盘的话，就只能选企业级硬盘了。这个玩意又大又贵，不考虑。那就是剩下固态硬盘了，SSD几乎也没得选 M.2接口、NV协议、PCI E 3.0走起。根据我这些年来被电脑折腾的经验来看，512G的硬盘够用了。
<br>主板在兼容我们选择的硬件的基础上。最重要的就是扩展性，尽量选购有两个内存插槽、两个M2接口的主板，至于后期升级CPU的说法，我只能说我没钱。其他的只要它不自燃都是阿巴阿巴阿巴
<br>电源如果你不想死的快的话，买新的买靠谱的。至于功率你只要买正常的基本都错错有余。
<br>机箱就看个人情况啦，实在穷的话鞋盒又不是不能用
<br><br>总结一下我们的需求：<br>
<br>整机功耗尽可能的低
<br>多核多线程的CPU
<br>16G起步的DDR4内存
<br>512G的M2固态
<br>带两个内存插槽、两个M2插槽的主板
<br>靠谱的电源
<br>这么一通限制下来，如果你像我一样还不太想折腾的话。那留下来的选项就只剩机顶盒了，俗称迷你主机。<br>
这里先叠个甲，厂商没给我钱。但是我非常愿意带货。
<br>”狗猫黄红“四大软件逛了一圈。有一个啥啥啥牌子的迷你主机挺便宜的，但是它的CPU市Intel的N100太弱鸡了不选。然后就是小米的那个迷你主机了，这个太贵了也不选。<br>最终我选的是um480xt这个产品。R7 4800H 8核16线程、双内存固态接口、待机功耗25W。准系统(不带内存，固态)叠叠劵之后售价1069。PDD淘一个镁光的16G 3200 DDR4 售价164。某东上的长城固态208，再加上阿里云ESC年费99。预计总费用：<br><img alt="Pasted image 20231128152131.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20231128152131.png"><br>
除了有点小贵，其他基本符合要求。<br><br>最后付上所有硬件的产品截图：<br><img alt="Pasted image 20231128163809.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20231128163809.png">]]></description><link>https://WhiteClouds.github.io/2-我的活动/all-in-one/1.-7*24运行的家用微型服务器选购指南.html</link><guid isPermaLink="false">2-我的活动/All in one/1. 7*24运行的家用微型服务器选购指南.md</guid><pubDate>Thu, 28 Mar 2024 05:25:33 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20231128113943.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20231128113943.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[2. CentOS的安装与SSH、FTP的配置]]></title><description><![CDATA[ 
 <br><br>Linux发行版本的选择一版是CentOS和Ubuntu，这两个系统应该没有什么好坏的区别。选择CentOS 7.9是因为公司一直在用这个版本，随大流。<br>CentOS的安装与Win基本一致，制作安装U盘，开机按F7进入启动项选择U盘启动。之后进入图形界面一路下一步。在系统组件菜单项里我选的是最小化安装，需要GUI图形界面的话，把相关组件勾选上就可以了。如果你对系统按照流程不熟悉，可以参考这个教程: <a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1Ft4y187Ta" rel="noopener" class="external-link" href="https://www.bilibili.com/video/BV1Ft4y187Ta" target="_blank">简单粗暴安装centos全过程 实机演示_哔哩哔哩_bilibili</a>,视频中的刻录软件点击这里可以直接下载。系统镜像可以通过国内的清华源进行下载，官网下载镜像的速度太慢。<br><br>在安装完Linux之后，我们<br>]]></description><link>https://WhiteClouds.github.io/2-我的活动/all-in-one/2.-centos的安装与ssh、ftp的配置.html</link><guid isPermaLink="false">2-我的活动/All in one/2. CentOS的安装与SSH、FTP的配置.md</guid><pubDate>Thu, 28 Mar 2024 03:40:55 GMT</pubDate></item><item><title><![CDATA[1. 两数之和]]></title><description><![CDATA[<a class="tag" href="https://WhiteClouds.github.io/?query=tag:hash" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#hash</a> 
 <br><a href="https://WhiteClouds.github.io?query=tag:hash" class="tag" target="_blank" rel="noopener">#hash</a><br>
查找用 hash
<br>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。<br>你可以按任意顺序返回答案。<br>示例 1：<br>
输入：nums = [2,7,11,15], target = 9<br>
输出：[0,1]<br>
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。<br>示例 2：<br>
输入：nums = [3,2,4], target = 6<br>
输出：[1,2]<br>示例 3：<br>
输入：nums = [3,3], target = 6<br>
输出：[0,1]<br>Solution :<br>package easy.twosum;

public class Solution {
    /**
     * 55ms;43.78MB
     */
    int[] twoSum(int[] nums, int target) {
        for (int i = 0; i &lt; nums.length; i++) {
            for (int j = i + 1; j &lt; nums.length; j++) {
                if (nums[i] + nums[j] == target)
                    return new int[]{i, j};
            }
        }
        return null;
    }
}
复制<br>Solution2：<br>package easy.twosum;

import java.util.HashMap;

public class Solution2 {
    /**
     * 2ms;44MB
     */
    int[] twoSum(int[] nums, int target) {
        HashMap&lt;Integer, Integer&gt; hashTable = new HashMap&lt;&gt;();
        for (int i = 0; i &lt; nums.length; i++) {
            if (hashTable.containsKey(target - nums[i])) {
                return new int[]{hashTable.get(target - nums[i]), i};
            }
            hashTable.put(nums[i], i);
        }
        return new int[0];
    }
}
复制]]></description><link>https://WhiteClouds.github.io/2-我的活动/leetcode/1.-两数之和.html</link><guid isPermaLink="false">2-我的活动/leetCode/1. 两数之和.md</guid><pubDate>Sun, 07 Apr 2024 07:23:35 GMT</pubDate></item><item><title><![CDATA[2. 两数相加]]></title><description><![CDATA[<a class="tag" href="https://WhiteClouds.github.io/?query=tag:链表" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#链表</a> 
 <br><a href="https://WhiteClouds.github.io?query=tag:链表" class="tag" target="_blank" rel="noopener">#链表</a><br>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。<br>示例 1：<br>
输入：l1 = [2,4,3], l2 = [5,6,4]<br>
输出：[7,0,8]<br>
解释：342 + 465 = 807.<br>示例 2：<br>
输入：l1 = [0], l2 = [0]<br>
输出：[0]<br>示例 3：<br>
输入：l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]<br>
输出：[8,9,9,9,0,0,0,1]<br>提示：<br>
每个链表中的节点数在范围 [1, 100] 内<br>
0 &lt;= Node.val &lt;= 9<br>
题目数据保证列表表示的数字不含前导零<br>ListNode:<br>package hard.addtwonumbers;

public class ListNode {
    int val;
    ListNode next;

    ListNode() {
    }

    ListNode(int val) {
        this.val = val;
    }

    ListNode(int val, ListNode next) {
        this.val = val;
        this.next = next;
    }
}
复制<br>Solution:<br>package hard.addtwonumbers;

public class Solution {
    /**
     * 1ms;43.52MB
     */
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        int c = 0, number1 = 0, number2 = 0;
        ListNode head = null;
        ListNode end = null;

        while (l1 != null || l2 != null || c != 0) {
            ListNode temp = end;
            end = new ListNode(0, null);
            if (temp != null)
                temp.next = end;
            if (head == null)
                head = end;

            if (l1 == null) number1 = 0;
            else number1 = l1.val;

            if (l2 == null) number2 = 0;
            else number2 = l2.val;

            int result = number1 + number2 + c;
            end.val = result % 10;
            c = result / 10;

            l1 = l1 != null ? l1.next : null;
            l2 = l2 != null ? l2.next : null;
        }
        return head;
    }
}
复制<br>Solution2:<br>
小技巧：对于链表问题，返回结果为头结点时，通常需要先初始化一个预先指针 pre，该指针的下一个节点指向真正的头结点 head。使用预先指针的目的在于链表初始化时无可用节点值，而且链表构造过程需要指针移动，进而会导致头指针丢失，无法返回结果。
<br>class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode pre = new ListNode(0);
        ListNode cur = pre;
        int carry = 0;
        while(l1 != null || l2 != null) {
            int x = l1 == null ? 0 : l1.val;
            int y = l2 == null ? 0 : l2.val;
            int sum = x + y + carry;
            
            carry = sum / 10;
            sum = sum % 10;
            cur.next = new ListNode(sum);

            cur = cur.next;
            if(l1 != null)
                l1 = l1.next;
            if(l2 != null)
                l2 = l2.next;
        }
        if(carry == 1) {
            cur.next = new ListNode(carry);
        }
        return pre.next;
    }
}
复制]]></description><link>https://WhiteClouds.github.io/2-我的活动/leetcode/2.-两数相加.html</link><guid isPermaLink="false">2-我的活动/leetCode/2. 两数相加.md</guid><pubDate>Sun, 07 Apr 2024 07:23:05 GMT</pubDate></item><item><title><![CDATA[题目]]></title><description><![CDATA[<a class="tag" href="https://WhiteClouds.github.io/?query=tag:滑动窗口" style="background-color: rgb(4, 108, 116); color: white; font-weight: 700; border: none; border-radius: 1em; padding: 0.2em 0.5em;">#滑动窗口</a> 
 <br><a href="https://WhiteClouds.github.io?query=tag:滑动窗口" class="tag" target="_blank" rel="noopener">#滑动窗口</a><br><br>示例&nbsp;1:<br>输入: s = "abcabcbb"<br>
输出: 3<br>
解释: 因为无重复字符的最长子串是 "abc"，所以其长度为 3。<br>示例 2:<br>输入: s = "bbbbb"<br>
输出: 1<br>
解释: 因为无重复字符的最长子串是 "b"，所以其长度为 1。<br>示例 3:<br>输入: s = "pwwkew"<br>
输出: 3<br>
解释: 因为无重复字符的最长子串是&nbsp;"wke"，所以其长度为 3。请注意，你的答案必须是 子串 的长度，"pwke"&nbsp;是一个子序列，_不是子串。<br>提示：<br>
<br>0 &lt;= s.length &lt;= 5 * 104
<br>s&nbsp;由英文字母、数字、符号和空格组成
<br><br>枚举所有子串，然后在每个子串中判断是否有重复的字符。最后取最长无重复字符的子串。<br><br>public class Solution {  
    /**  
     * 424ms;41.59MB
     */  
    public int lengthOfLongestSubstring(String s) {  
        int i, j, k, m, l = 0;  
        for (i = 0; i &lt; s.length(); i++) {  
            for (j = i + 1; j &lt; s.length(); j++) {  
                for (k = i; k &lt; j; k++) {  
                    if (s.charAt(k) == s.charAt(j)) {  
                        break;  
                    }  
                }  
                if (k &lt; j) break;  
            }  
            m = j - i;  
            if (m &gt; l) l = m;  
        }  
        return l;  
    }  
}
复制<br><br>查看 Solution 1 可以发现两个优化方向：<br>
<br>可以使用滑动窗口来构造子串
<br>使用 HashSet 在子串中查找重复字符
<br>public class Solution2 {  
    /**  
     * 6ms;43.6MB     
     */    
	public int lengthOfLongestSubstring(String s) {  
        HashSet&lt;Character&gt; occ = new HashSet&lt;&gt;();  
        int l = 0;  
        int rk = -1;  
        int n = s.length();  
        for (int i = 0; i &lt; n; i++) {  
            if (l &gt;= n - i)  
                return l;  
            if (i != 0)  
                occ.remove(s.charAt(i - 1));  
            while (rk + 1 &lt; n &amp;&amp; !occ.contains(s.charAt(rk + 1))) {  
                occ.add(s.charAt(rk + 1));  
                rk++;  
            }  
            l = Math.max(l, rk - i + 1);  
        }  
        return l;  
    }  
}
复制<br><br>以 "pwawb"为例，当以 p 开头的子串“(pwa)w”重复时，那以 w 开头的子串“(wa)w”也必然重复，且长度必然小于 p 开头的子串。<br>public class Solution3 {  
    /**  
     * 5ms;43.42MB     
     * */    
     public int lengthOfLongestSubstring(String s) {  
        HashMap&lt;Character, Integer&gt; occ = new HashMap&lt;Character, Integer&gt;();  
        int l = 0;  
        int left = 0;  
        int n = s.length();  
        for (int i = 0; i &lt; n; i++) {  
            if (l &gt;= n - left) return l;  
            if (occ.containsKey(s.charAt(i))) {  
                left = Math.max(left, occ.get(s.charAt(i)) + 1);  
            }  
            occ.put(s.charAt(i), i);  
            l = Math.max(l, i - left + 1);  
        }  
        return l;  
    }  
}
复制]]></description><link>https://WhiteClouds.github.io/2-我的活动/leetcode/3.-无重复字符的最长子串.html</link><guid isPermaLink="false">2-我的活动/leetCode/3. 无重复字符的最长子串.md</guid><pubDate>Sun, 07 Apr 2024 08:27:03 GMT</pubDate></item><item><title><![CDATA[Frank老师学习和复习方法]]></title><description><![CDATA[ 
 <br>
<br>要记笔记，多记多写加深印象
<br>学完一单元，做练习册
<br>尽可能把课文背下来，多读文章
<br>用阅读养单词，不要拿一个单词本在那里死背
]]></description><link>https://WhiteClouds.github.io/3-学习笔记/新概念英语1/frank老师学习和复习方法.html</link><guid isPermaLink="false">3-学习笔记/新概念英语1/Frank老师学习和复习方法.md</guid><pubDate>Thu, 29 Feb 2024 11:29:08 GMT</pubDate></item><item><title><![CDATA[Lesson 1 Excuse me！]]></title><description><![CDATA[ 
 <br><br>例如：excuse /Ik'skju:z/ -&gt; /Ik'sgju:z/<br><br><br>
<br>this这个单词读的时候嘴不要张太大，最后那个/s/声带不震动。
<br>is这个单词最后的/s/声带振动。
<br><br>
<br>hand+bag=handbag 女士手提包
<br>school+bag=schoolbag 书包
<br><br><br><img alt="Pasted image 20240225195546.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240225195546.png"><br>
后鼻音舌头下压，前鼻音舌头上台
<br><br>
<br>Thank you very much
<br>Thanks
<br>Many Thanks
<br>Thanks a lot
<br>Thanks very much
<br><br>
<br>You are welcome
<br>Welcome
<br>That's okay
<br>Not at all
<br>It's My/a plaseture
<br>That's all right
<br><br><br>
主格一般做主语，放在句首；宾格做宾语，放在动词或介词之后
<br><br>
<br>be动词有am、is、are
<br>am只能跟在第一人称单数I后面
<br>is跟在第三人称单数he、she后面，is也可以放在动物、事物、地名后面
<br>are搭配我们we、你们you、他们they；you不管单数复数都用are
<br><br>
<br>肯定句：This is my handbag.这是我的手提包
<br>否定句：This is not my handbag.这不是我的手提包

<br>含有be动词的句子变否定句，就是在be动词后面加not


<br>疑问句：Is this my handbag?这是我的手提包吗？

<br>含有be动词的句子变疑问句，就把be动词提到句子前面，并大写。


<br>肯定回答：Yes, it is.是的
<br>否定回答：No, it isn't.不是
]]></description><link>https://WhiteClouds.github.io/3-学习笔记/新概念英语1/lesson-1-excuse-me！.html</link><guid isPermaLink="false">3-学习笔记/新概念英语1/Lesson 1 Excuse me！.md</guid><pubDate>Tue, 26 Mar 2024 01:25:31 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240225195546.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240225195546.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[Lesson 2 Is this your...?]]></title><description><![CDATA[ 
 <br>
<a data-tooltip-position="top" aria-label="https://www.bilibili.com/video/BV1UH4y1j7wJ?p=2&amp;vd_source=1bfe469a264a2b5f885f412c3b094c96" rel="noopener" class="external-link" href="https://www.bilibili.com/video/BV1UH4y1j7wJ?p=2&amp;vd_source=1bfe469a264a2b5f885f412c3b094c96" target="_blank">视屏</a>
<br><br>
<br>pen pal 笔友
<br>pen name 笔名
<br><br>
<br>pencil box 铅笔盒
<br><br>Aa Bb Cc Dd Ee Ff Gg Hh Ii Jj Kk Ll Mm Nn Oo Pp Qq Rr Ss Tt Uu Vv Ww Xx Yy Zz<br><br>One Two Three Four Five Six Seven Eight Nine Ten]]></description><link>https://WhiteClouds.github.io/3-学习笔记/新概念英语1/lesson-2-is-this-your...html</link><guid isPermaLink="false">3-学习笔记/新概念英语1/Lesson 2 Is this your...?.md</guid><pubDate>Mon, 26 Feb 2024 11:41:59 GMT</pubDate></item><item><title><![CDATA[Lesson 3 Sorry,sir]]></title><description><![CDATA[ 
 <br><br>雨伞，嘴张大。<br><br>请；可以放在句首，也可以放在句尾。同时也可以单独当一个句子。<br><br>cloak+room = 披风+room = 衣帽寄存处<br>
bath+room = 洗澡+room = 浴室<br>
class+room = 班级+room = 教室<br><br>票，凭证；不要只记成是票，更多把他记成是凭证<br><br>男 sir  女 madam<br>
gentleman 绅士<br>
guy 家伙<br>
boy 男孩<br>
Mister Black 布莱克先生<br><br>先生，您要买什么？<br><br>
<br>编号：Number+数字
<br>手机号码
<br><br>Here‘s your umbrella and your coat. 这是您的雨伞和大衣。<br>
还原成常规句式：<br>
Your umbrella and your coat are here. <br>因为第一个倒装句中离be动词最近的主语是your umbrella是单数，所以根据就近原则用is；这个语法只在倒装be动词的时候生效。<br><br>Sorry表示有错误的时候道歉；Excuse me更多的是客套。<br><br>it is = it's ; is not = isn't<br><br>在句子中代指双方都清楚的物品。<br><br>什么时候用a和an。取决于后面的单词第一次读音口型有没有发生变化。变化用a，没变用an；a和an的主要作用是用来后单词第一个读音区分，让别人能听的清。]]></description><link>https://WhiteClouds.github.io/3-学习笔记/新概念英语1/lesson-3-sorry,sir.html</link><guid isPermaLink="false">3-学习笔记/新概念英语1/Lesson 3 Sorry,sir.md</guid><pubDate>Wed, 28 Feb 2024 11:57:52 GMT</pubDate></item><item><title><![CDATA[Lesson 4 Is this your...?]]></title><description><![CDATA[ 
 <br><br>男士或女士比较正式的衣服，不单单指西服<br><br>在美服可以把陌生人叫son，有调侃的意思。不一定就是骂人<br><br>音标/gh/在很多单词中不发音比如:daughter 女儿]]></description><link>https://WhiteClouds.github.io/3-学习笔记/新概念英语1/lesson-4-is-this-your...html</link><guid isPermaLink="false">3-学习笔记/新概念英语1/Lesson 4 Is this your...?.md</guid><pubDate>Thu, 29 Feb 2024 12:23:09 GMT</pubDate></item><item><title><![CDATA[Lesson 5 Nice to meet you]]></title><description><![CDATA[ 
 <br><br>
<br>Good Morning: 早上好，在英语中5:00-12:00都可以叫早上好
<br>Good afternoon：下午好，noon是中午的意思。after是“在...之后”。在中午之后就是下午啦
<br>Good evening：傍晚好
<br>Good night：晚上好；eight-8
<br><br>
<br>Mister是对男士的尊称，敬称
<br>Mrs：已婚女士尊称
<br>miss：未婚女士
<br>Ms：不知道婚姻状况
<br><br>
<br>哪国人和哪国的的单词都是一样的。既可以是名词，也可以是形容词
<br>但是French不是法国，就像Chinese是中国人；中国的。China才是中国名称
<br><br>遇见<br><br>也<br><br>11-eleven 12-twelve 13-thirteen 14-fourteen 15-fifteen 16-sixteen 17-seventeen<br>
18-eighteen 19-nineteen 20-twenty<br><br>21 : twenty-one 22 : twenty-two 30 : thirty]]></description><link>https://WhiteClouds.github.io/3-学习笔记/新概念英语1/lesson-5-nice-to-meet-you.html</link><guid isPermaLink="false">3-学习笔记/新概念英语1/Lesson 5 Nice to meet you.md</guid><pubDate>Wed, 03 Apr 2024 01:10:04 GMT</pubDate></item><item><title><![CDATA[What make is it ？]]></title><description><![CDATA[ 
 <br><br>
这是什么牌子？
<br>
<br>这里的make是做名词使用。
<br>上文中的make也可以用brand替换：what brand is it?也是“这是什么牌子？”的意思
<br><br>
区别于一般疑问句，特殊疑问句不能够使用yes或no来回答。<br>
一般疑问句用升调，特殊疑问句用降调。
<br>特殊疑问句通常用Who，What，When，Which，Why，Where，Whose，How。其中 what 的意思是“什么”。<br><br>
英文的思路和中文是反着来的。英文的思路是：什么颜色是这个房子。
<br>造句：<br>
What color is the table？桌子<br>
What color is the horse？马<br>
What color is the car？车<br><br><br><img alt="Pasted image 20240403204615.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240403204615.png"><br><br><img alt="Pasted image 20240403204842.png" src="https://WhiteClouds.github.io/lib/media/pasted-image-20240403204842.png">]]></description><link>https://WhiteClouds.github.io/3-学习笔记/新概念英语1/lesson-6-what-make-is-it？.html</link><guid isPermaLink="false">3-学习笔记/新概念英语1/Lesson 6 What make is it？.md</guid><pubDate>Wed, 03 Apr 2024 12:49:14 GMT</pubDate><enclosure url="https://WhiteClouds.github.io/lib/media/pasted-image-20240403204615.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src="https://WhiteClouds.github.io/lib/media/pasted-image-20240403204615.png"&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[认识微服务]]></title><description/></item></channel></rss>